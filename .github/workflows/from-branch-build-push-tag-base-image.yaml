name: Build and Push From Branch

on:
  workflow_dispatch:
    inputs:
      Tag:
        description: "Tag: Base Image Tag to Deploy to docker hub. Because we are creating a version from a branch and not from a version, it must be in format {REPO_INTEGRATION_RELEASE}_base_#"
        default: "1.1.1"
        type: string
        required: true
      Branch:
        description: "Branch: The branch containing the manually modified docker files to build and push to docker. If the action is successful, this branch will be deleted."
        type: string
        required: true
      IsLatest:
        description: "IsLatest: (default false) If True, release branch will be merged back into main and release will be set as latest."
        default: false
        type: boolean
      SkipGit:
        description: "SkipGit: (default false) If True, no changes will be made to repo. However, the new images will still be pushed to Docker Hub!"
        default: false
        type: boolean
permissions:
  contents: write

jobs:
  Build_And_Push_Base_Image_From_Branch:
    runs-on: [ mend-self-hosted, profile=developer-platform-xlarge ]

    steps:
      - name: Validate tag
        run: |
          if [[ "${{ github.event.inputs.Branch }}" =~ ^([0-9]|[1-9][0-9]*)\.(([0-9]|[1-9][0-9]*)\.)*([1-9][0-9]*)_base_([1-9][0-9]*)$ ]]; then
            echo "Branch input, ${{ github.event.inputs.Branch }} is not in the format {REPO_INTEGRATION_RELEASE}_base_#"
            echo "Failing action"
            exit 1
          fi

      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.Branch }}
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      - name: Build Docker Images
        run: |
          ./bin/build.sh ${{ github.event.inputs.Tag }}

      - name: Publish to Docker Hub
        run: |
          ./bin/publish.sh ${{ github.event.inputs.Tag }}


      - name: Branch, Commit, Push and Tag Changes
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # If SkipGet is true, don't modify repo
          if [ "${{ github.event.inputs.SkipGit }}" = true ]; then
            echo "SkipGit is true, skipping git changes"
            exit 0
          fi
          
          # Note: using Github
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create Release branch
          git checkout -b release/${{ github.event.inputs.Tag }}
          git push --set-upstream origin release/${{ github.event.inputs.Tag }}
          
          # If files changed, add, commit and push
          if [[ `git status --porcelain` ]]; then
            echo "OK: Changes detected, committing and pushing."
            git add .
            git commit -m "Saving new files for ${{ github.event.inputs.Tag }}"
            git push
          else
            echo "WARNING: No changes were detected. This is fine though, skipping commit"
          fi
          
          # Create tag
          git tag -a ${{ github.event.inputs.Tag }} -m "Automated Tag for Release ${{ github.event.inputs.Tag }}"
          git push origin --tags
          
          # Create release
          if [ "${{ github.event.inputs.IsLatest }}" = false ]; then
            gh release create "${{ github.event.inputs.Tag }}" --latest=false --generate-notes --target release/${{ github.event.inputs.Tag }} --title "${{ github.event.inputs.Tag }}"
            echo "IsLatest is false, not merging release branch back into main"
          else
            # Merge release branch back into main
            git checkout main
            git merge release/${{ github.event.inputs.Tag }} --commit --no-edit
            git push
          fi
          
          echo "Deleting original branch, ${{ github.event.inputs.Branch }}"
          git push -d origin ${{ github.event.inputs.Branch }}

        shell: bash




