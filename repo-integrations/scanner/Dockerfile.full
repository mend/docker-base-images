# This default may be swapped for any compatible base image
ARG BASE_IMAGE=ubuntu:24.04

# Containerbase is used for tool installation and user/directory setup
FROM containerbase/base:13.0.22 AS containerbase

FROM ${BASE_IMAGE} as base

# Containerbase supports custom user
ARG USER_NAME=wss-scanner
ARG USER_ID=1000
ARG USER_HOME=/home/${USER_NAME}
ARG APT_HTTP_PROXY

# Set env and shell
ENV BASH_ENV=/usr/local/etc/env
SHELL ["/bin/bash" , "-c"]

# Set up containerbase
COPY --from=containerbase /usr/local/sbin/ /usr/local/sbin/
COPY --from=containerbase /usr/local/containerbase/ /usr/local/containerbase/
RUN install-containerbase && \
    prepare-tool all

# renovate: datasource=github-tags depName=git lookupName=git/git
ARG GIT_VERSION=v2.41.0
RUN install-tool git

# install git lfs
#ARG GIT_LFS_VERSION=v3.5.1
#RUN install-tool git-lfs

# renovate: datasource=docker depName=node versioning=docker
ARG NODE_VERSION=20.12.0
RUN install-tool node

# renovate: datasource=npm depName=npm versioning=npm
ARG NPM_VERSION=10.5.0
RUN install-tool npm

# renovate: datasource=npm depName=yarn
ARG YARN_VERSION=1.22.19
RUN install-tool yarn

# renovate: datasource=npm depName=bower
ARG BOWER_VERSION=1.8.14
RUN install-tool bower

## Install PNPM
ENV PNPM_HOME=${USER_HOME}/share/pnpm
ENV PATH="${PATH}:${PNPM_HOME}"
RUN npm install --global pnpm

### provide permissions
RUN echo '{ "allow_root": true }' > ${USER_HOME}/.bowerrc && \
	chown -R ${USER_NAME}:${GROUP_NAME} ${USER_HOME}/.bowerrc

ARG JAVA_VERSION=8.0.342+7
RUN install-tool java

ARG JAVA_VERSION=11.0.19+7
RUN install-tool java

ARG JAVA_VERSION=21.0.3+9.0.LTS
RUN install-tool java

### !!! PAY ATTENTION! The version that should be the default, must be installed last !!! ###
ARG JAVA_VERSION=17.0.8+7
RUN install-tool java

# renovate: datasource=gradle-version depName=gradle versioning=gradle
ARG GRADLE_VERSION=6.9.4
RUN install-tool gradle

### !!! PAY ATTENTION! The version that should be the default, must be installed last !!! ###
# renovate: datasource=gradle-version depName=gradle versioning=gradle
ARG GRADLE_VERSION=7.6.2
RUN install-tool gradle

# renovate: datasource=docker depName=golang versioning=docker
ARG GOLANG_VERSION=1.22.2
RUN install-tool golang
# A temporary workaround, until it is fixed by renovate
ENV GOSUMDB="sum.golang.org"

USER ${USER_ID}
## Install package managers

RUN go install github.com/tools/godep@latest
RUN go install github.com/LK4D4/vndr@latest
RUN go install  github.com/kardianos/govendor@latest

#All Deparacted/archived go package managers
# RUN go install  github.com/gpmgo/gopm@latest
# RUN go install  github.com/golang/dep/cmd/dep@latest
# RUN go install github.com/Masterminds/glide@latest
# RUN curl https://glide.sh/get | sh
USER 0

# renovate: datasource=maven depName=maven lookupName=org.apache.maven:maven
ARG MAVEN_VERSION=3.9.4
RUN install-tool maven

# renovate: datasource=github-releases depName=scala lookupName=scala/scala
ARG SCALA_VERSION=2.13.5
RUN install-tool scala

# renovate: datasource=github-releases depName=sbt lookupName=sbt/sbt
ARG SBT_VERSION=1.5.7
RUN install-tool sbt

# renovate: datasource=github-releases depName=python lookupName=containerbase/python-prebuild
ARG PYTHON_VERSION=3.6.15
RUN install-tool python

# renovate: datasource=github-releases depName=python lookupName=containerbase/python-prebuild
ARG PYTHON_VERSION=2.7.18
RUN install-tool python

# renovate: datasource=github-releases depName=python lookupName=containerbase/python-prebuild
ARG PYTHON_VERSION=3.11.4
RUN install-tool python

# renovate: datasource=github-releases depName=python lookupName=containerbase/python-prebuild
ARG PYTHON_VERSION=3.12.3
RUN install-tool python

# renovate: datasource=github-releases depName=python lookupName=containerbase/python-prebuild
ARG PYTHON_VERSION=3.10.14
RUN install-tool python

# renovate: datasource=github-releases depName=python lookupName=containerbase/python-prebuild
ARG PYTHON_VERSION=3.9.17
RUN install-tool python

# renovate: datasource=github-releases depName=python lookupName=containerbase/python-prebuild
ARG PYTHON_VERSION=3.7.17
RUN install-tool python

# renovate: datasource=github-releases depName=python lookupName=containerbase/python-prebuild
ARG PYTHON_VERSION=3.8.12
RUN install-tool python

# renovate: datasource=pypi depName=checkov ; Must be installed after python and before python version 3.7.17
ARG CHECKOV_VERSION=3.2.174
RUN install-tool checkov

ARG PHP_VERSION=8.2.3
RUN install-tool php

# renovate: datasource=github-releases depName=composer lookupName=composer/composer
ARG COMPOSER_VERSION=2.0.13
RUN install-tool composer

# These are needed to get earlier dotnet versions to install in Ubuntu 24.04
RUN curl -o /tmp/libssl1.1_1.1.1f-1ubuntu2.23_amd64.deb https://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.23_amd64.deb
RUN dpkg -i /tmp/libssl1.1_1.1.1f-1ubuntu2.23_amd64.deb
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1

ARG DOTNET_VERSION=2.2.207
RUN install-tool dotnet

ARG DOTNET_VERSION=3.1.416
RUN install-tool dotnet

ARG DOTNET_VERSION=5.0.404
RUN install-tool dotnet

ARG DOTNET_VERSION=6.0.427
RUN install-tool dotnet

ARG DOTNET_VERSION=8.0.403
RUN install-tool dotnet

ARG DOTNET_VERSION=9.0.100
RUN install-tool dotnet

ARG DOTNET_VERSION=7.0.410
RUN install-tool dotnet

# Set .NET SDK 7.0.405 as the default version
RUN echo '{ "sdk": { "version": "7.0.410" } }' > ${USER_HOME}/global.json

ARG RUST_VERSION=1.58.1
RUN install-tool rust

# pip user install (so available for all python versions)
USER ${USER_ID}

# renovate: datasource=pypi depName=pipenv
ARG PIPENV_VERSION=2023.7.23
RUN install-tool pipenv



USER 0

# renovate: datasource=pypi
ARG POETRY_VERSION=1.6.0
RUN install-tool poetry

# renovate: datasource=github-releases depName=ruby lookupName=containerbase/ruby-prebuild
ARG RUBY_VERSION=3.2.2
RUN install-tool ruby && \
    gem install rubygems-update -v 3.3.0 && \
    gem update --system

# renovate: datasource=rubygems depName=bundler versioning=ruby
ARG BUNDLER_VERSION=2.4.18
RUN install-tool bundler

RUN install-tool erlang 24.3.3.0

RUN install-tool elixir 1.13.4

#### Install rbenv and ruby-build
### or maybe be saved to /etc/profile instead of /etc/profile.d/
# RUN git clone https://github.com/sstephenson/rbenv.git ${USER_HOME}/.rbenv; \
#	git clone https://github.com/sstephenson/ruby-build.git ${USER_HOME}/.rbenv/plugins/ruby-build; \
#	${USER_HOME}/.rbenv/plugins/ruby-build/install.sh && \
#	echo 'eval "$(rbenv init -)"' >> /etc/profile.d/rbenv.sh && \
#	echo 'eval "$(rbenv init -)"' >> ${USER_HOME}/.bashrc && \
#	chown -R ${USER_NAME}:${GROUP_NAME} ${USER_HOME}/.rbenv ${USER_HOME}/.bashrc
# ENV PATH ${USER_HOME}/.rbenv/bin:$PATH

# renovate: datasource=rubygems depName=cocoapods versioning=ruby
ARG COCOAPODS_VERSION=1.11.2
RUN install-tool cocoapods
RUN adduser cocoapods
USER cocoapods
RUN pod setup
USER 0

ARG HELM_VERSION=3.11.2
RUN install-tool helm

## No renovate datasource exists yet
ARG HASKELL_GHC_VERSION=8.6.5

## No renovate datasource exists yet
ARG CABAL_VERSION=3.2

ENV DEBIAN_FRONTEND noninteractive
ENV LANGUAGE	en_US.UTF-8
ENV LANG    	en_US.UTF-8
ENV LC_ALL  	en_US.UTF-8

### Install wget, curl, unzip, gnupg, locales
RUN apt-get update && \
	apt-get -y install wget curl unzip gnupg locales && \
	locale-gen en_US.UTF-8 && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/* && \
	rm -rf /tmp/*


#### Install Conda
## Warning: Using Anaconda's default channel may require a commercial license.
## However, the conda-forge channel is not subject to the same terms. See commented
## out settings below for an example of using conda-forge.
#
# Set conda-forge to be the default registry
# conda config --add channels conda-forge
# Use conda-forge strictly
# conda config --set channel_priority strict
USER ${USER_ID}
RUN cd ${USER_HOME} && \
        mkdir -p ${USER_HOME}/miniconda3 && \
        wget https://repo.anaconda.com/miniconda/Miniconda3-py39_24.1.2-0-Linux-x86_64.sh -O ${USER_HOME}/miniconda3/miniconda.sh && \
        bash ${USER_HOME}/miniconda3/miniconda.sh -b -u -p ${USER_HOME}/miniconda3 && \
        rm -rf ${USER_HOME}/miniconda3/miniconda.sh


USER 0
RUN echo '#!/usr/bin/env bash' >> /usr/bin/conda && \
        echo 'source ${USER_HOME}/miniconda3/etc/profile.d/conda.sh' >> /usr/bin/conda && \
        echo '${USER_HOME}/miniconda3/bin/conda "$@"' >> /usr/bin/conda && \
        chmod +x /usr/bin/conda


#### Important note ###
#### uncomment for:
####    Scala
####    SBT
####    Mix/ Hex/ Erlang/ Elixir
####    dotnet/nuget cli's
RUN apt-get update && \
	apt-get install -y --force-yes build-essential software-properties-common && \
	apt-get install -y --force-yes zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt-dev && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/* && \
	rm -rf /tmp/*

## Install PHP Plugins
RUN apt-get update && \
	apt-get install -y php-mbstring && \
	apt-get install -y php-dom && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/* && \
	rm -rf /tmp/*



#### Install R and Packrat
RUN apt-get update && \
	apt-get install -y r-base libopenblas-dev r-base gdebi && \
	wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-2021.09.1-372-amd64.deb && \
	gdebi rstudio-server-2021.09.1-372-amd64.deb && \
	rm rstudio-server-2021.09.1-372-amd64.deb && \
	R -e 'install.packages("packrat" , repos="http://cran.us.r-project.org");'  && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/* && \
	rm -rf /tmp/*

#### Install Cabal
RUN apt-get update &&\
	apt-get install -y build-essential curl libffi-dev libffi8ubuntu1 libgmp-dev libgmp10 libncurses-dev && \
	apt-get clean && \
	rm -rf /var/lib/apt/lists/* && \
	rm -rf /tmp/*

USER ${USER_ID}

RUN curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh && \
	source /home/wss-scanner/.ghcup/env && \
	echo "source /home/wss-scanner/.ghcup/env" >> /home/wss-scanner/.bashrc && \
	ghcup install cabal ${CABAL_VERSION} &&\
	cabal update

USER 0

#### Install Mono
RUN apt-get update && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
    apt-get install -y --no-install-recommends apt-transport-https ca-certificates && \
    echo "deb https://download.mono-project.com/repo/ubuntu bionic main" | tee /etc/apt/sources.list.d/mono-official-stable.list && \
    apt-get update && \
    apt-get install -y mono-devel && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /tmp/*

### Install Nuget CLI
RUN apt-get update && \
	apt-get install nuget

## Install Paket
ENV PAKET_HOME=${USER_HOME}/.dotnet/tools
ENV PATH="${PATH}:${PAKET_HOME}"
RUN dotnet tool install Paket --version 7.2.1 --tool-path ${PAKET_HOME}

## Install Bazel 6.1.1, 5.1.1 and set version 6.1.1 as default
RUN echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list && \
    curl https://bazel.build/bazel-release.pub.gpg | apt-key add - && \
    apt-get update && \
    apt-get -y install bazel-6.1.1 && \
    apt-get -y upgrade bazel-6.1.1 && \
    apt-get -y install bazel-5.1.1 && \
    apt-get -y upgrade bazel-5.1.1 && \
    ln -s /usr/bin/bazel-6.1.1 /usr/local/bin/bazel

# Install Swift (including SPM)
ARG SWIFT_VERSION=5.10.0
RUN install-tool swift
